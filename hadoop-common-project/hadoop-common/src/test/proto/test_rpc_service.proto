/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";
option java_package = "org.apache.hadoop.ipc.protobuf";
option java_outer_classname = "TestRpcServiceProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
package hadoop.common;

import "test.proto";


/**
 * A protobuf service for use in tests
 */
service TestProtobufRpcProto {
  rpc ping(EmptyRequestProto) returns (EmptyResponseProto);
  rpc echo(EchoRequestProto) returns (EchoResponseProto);
  rpc error(EmptyRequestProto) returns (EmptyResponseProto);
  rpc error2(EmptyRequestProto) returns (EmptyResponseProto);
  rpc error3(EmptyRequestProto) returns (EmptyResponseProto);
  rpc slowPing(SlowPingRequestProto) returns (EmptyResponseProto);
  rpc echo2(EchoRequestProto2) returns (EchoResponseProto2);
  rpc add(AddRequestProto) returns (AddResponseProto);
  rpc add2(AddRequestProto2) returns (AddResponseProto);
  rpc testServerGet(EmptyRequestProto) returns (EmptyResponseProto);
  rpc exchange(ExchangeRequestProto) returns (ExchangeResponseProto);
  rpc sleep(SleepRequestProto) returns (EmptyResponseProto);
  rpc lockAndSleep(SleepRequestProto) returns (EmptyResponseProto);
  rpc getAuthMethod(EmptyRequestProto) returns (AuthMethodResponseProto);
  rpc getAuthUser(EmptyRequestProto) returns (UserResponseProto);
  rpc echoPostponed(EchoRequestProto) returns (EchoResponseProto);
  rpc sendPostponed(EmptyRequestProto) returns (EmptyResponseProto);
  rpc getCurrentUser(EmptyRequestProto) returns (UserResponseProto);
  rpc getServerRemoteUser(EmptyRequestProto) returns (UserResponseProto);
}

service TestProtobufRpc2Proto {
  rpc ping2(EmptyRequestProto) returns (EmptyResponseProto);
  rpc echo2(EchoRequestProto) returns (EchoResponseProto);
  rpc sleep(SleepRequestProto) returns (SleepResponseProto);
}

service OldProtobufRpcProto {
  rpc ping(EmptyRequestProto) returns (EmptyResponseProto);
  rpc echo(EmptyRequestProto) returns (EmptyResponseProto);
}

service NewProtobufRpcProto {
  rpc ping(EmptyRequestProto) returns (EmptyResponseProto);
  rpc echo(OptRequestProto) returns (OptResponseProto);
}

service NewerProtobufRpcProto {
  rpc ping(EmptyRequestProto) returns (EmptyResponseProto);
  rpc echo(EmptyRequestProto) returns (EmptyResponseProto);
}

service CustomProto {
  rpc ping(EmptyRequestProto) returns (EmptyResponseProto);
}

service TestProtobufRpcHandoffProto {
  rpc sleep(SleepRequestProto2) returns (SleepResponseProto2);
}
